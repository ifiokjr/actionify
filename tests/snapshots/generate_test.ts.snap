export const snapshot = {};

snapshot[`basic 1`] = `
# This file was autogenerated with actionify@0.2.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.2.0/cli.ts

name: ci
'on':
  check_run:
    types:
      - completed
      - created
      - requested_action
      - rerequested
  push: null
  pull_request:
    branches:
      - main
  schedule:
    cron: ''
  fork: null
permissions: write-all
env:
  YO: \${{ github.workspace }}
defaults:
  run:
    shell: bash
jobs:
  a:
    name: A
    runs-on: ubuntu-latest
    outputs:
      action: \${{ env.GITHUB_ACTION }}
    steps:
      - uses: some/repo
  b:
    name: B
    runs-on: ubuntu-latest
    outputs:
      ci: \${{ env.CI }}
    steps:
      - uses: some/repo
  c:
    name: \${{ needs.a.outputs.action }}
    needs: a
    runs-on: ubuntu-latest
    environment:
      url: \${{ job.services.nginx.id }}
      name: some-environment
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        node:
          - 16
          - 17
          - 18
        exclude:
          - os: ubuntu-latest
            node: 16
          - yo: true
        include:
          - a: 100
    services:
      nginx:
        image: nginx
        ports:
          - '8080:80'
      redis:
        image: redis
        ports:
          - 6379/tcp
    steps:
      - id: step1
        name: Step 1
        run: echo "::set-output name=value::custom"

`;

snapshot[`quickstart 1`] = `
# This file was autogenerated with actionify@0.2.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.2.0/cli.ts

name: GitHub Actions Demo
'on':
  push: null
jobs:
  Explore-GitHub-Actions:
    name: Explore Github Actions
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a \${{ github.event_name }} event.
      - run: echo "🐧 This job is now running on a \${{ runner.os }} server hosted by GitHub!"
      - run: >-
          echo "🔎 The name of your branch is \${{ github.ref }} and your repository is \${{
          github.repository }}."
      - name: Check out the repository code
        uses: actions/checkout@v3
      - run: echo "💡 The \${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in your repository
        run: ls \${{ github.workspace }}
      - run: echo "🍏 This job's status is \${{ job.status }}."

`;

snapshot[`reusable 1`] = `
# This file was autogenerated with actionify@0.2.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.2.0/cli.ts

name: Call a reusable workflow
'on':
  pull_request:
    branches:
      - main
jobs:
  callWorkflow:
    name: Call the reusable workflow
    uses: ./.github/workflows/reusable.yml
    with:
      username: me
      password: secure
    secrets:
      envPAT: amazing
  useCalledWorkflowOutputs:
    name: Use the outputs from previous reusable workflow
    needs: callWorkflow
    runs-on: ubuntu-latest
    steps:
      - run: >-
          echo ::debug::\${{ needs.callWorkflow.outputs.firstWord }} \${{
          needs.callWorkflow.outputs.firstWord }}

`;

snapshot[`reusable 2`] = `
# This file was autogenerated with actionify@0.2.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.2.0/cli.ts

name: A reusable workflow
'on':
  workflow_call:
    inputs:
      username:
        required: true
        type: string
      password:
        required: true
        type: string
      optional:
        type: number
    secrets:
      envPAT:
        required: true
      hush:
        description: Not required
    outputs:
      firstWord:
        description: The first output string
        value: \${{ jobs.exampleJob.outputs.output1 }}
      secondWord:
        description: The first output string
        value: \${{ jobs.exampleJob.outputs.output2 }}
jobs:
  exampleJob:
    name: Generate Output For Workflow
    runs-on: ubuntu-latest
    outputs:
      output1: \${{ steps.step1.outputs.firstWord }}
      output2: \${{ steps.step2.outputs.secondWord }}
    steps:
      - id: step1
        run: echo "::set-output name=firstWord::hello"
      - id: step2
        run: echo "::set-output name=secondWord::hello"

`;

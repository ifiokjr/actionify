export const snapshot = {};

snapshot[`basic 1`] = `
# This file was autogenerated with actionify@0.3.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.3.0/cli.ts

name: ci
'on':
  check_run:
    types:
      - completed
      - created
      - requested_action
      - rerequested
  push: null
  pull_request:
    branches:
      - main
  schedule:
    cron: ''
  fork: null
permissions: write-all
env:
  YO: \${{ github.workspace }}
defaults:
  run:
    shell: bash
jobs:
  a:
    name: A
    runs-on: ubuntu-latest
    outputs:
      action: \${{ env.GITHUB_ACTION }}
    steps:
      - uses: some/repo
  b:
    name: B
    runs-on: ubuntu-latest
    outputs:
      ci: \${{ env.CI }}
    steps:
      - uses: some/repo
  c:
    name: \${{ needs.a.outputs.action }}
    needs: a
    runs-on: ubuntu-latest
    environment:
      url: \${{ job.services.nginx.id }}
      name: some-environment
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        node:
          - 16
          - 17
          - 18
        exclude:
          - os: ubuntu-latest
            node: 16
          - yo: true
        include:
          - a: 100
    services:
      nginx:
        image: nginx
        ports:
          - '8080:80'
      redis:
        image: redis
        ports:
          - 6379/tcp
    steps:
      - id: step1
        name: Step 1
        run: echo "::set-output name=value::custom"

`;

snapshot[`quickstart 1`] = `
# This file was autogenerated with actionify@0.3.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.3.0/cli.ts

name: GitHub Actions Demo
'on':
  push: null
jobs:
  Explore-GitHub-Actions:
    name: Explore Github Actions
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a \${{ github.event_name }} event.
      - run: echo "🐧 This job is now running on a \${{ runner.os }} server hosted by GitHub!"
      - run: >-
          echo "🔎 The name of your branch is \${{ github.ref }} and your repository is \${{
          github.repository }}."
      - name: Check out the repository code
        uses: actions/checkout@v3
      - run: echo "💡 The \${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in your repository
        run: ls \${{ github.workspace }}
      - run: echo "🍏 This job's status is \${{ job.status }}."

`;

snapshot[`reusable 1`] = `
# This file was autogenerated with actionify@0.3.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.3.0/cli.ts

name: Call a reusable workflow
'on':
  pull_request:
    branches:
      - main
jobs:
  callWorkflow:
    name: Call the reusable workflow
    uses: ./.github/workflows/reusable.yml
    with:
      username: me
      password: secure
    secrets:
      envPAT: amazing
  useCalledWorkflowOutputs:
    name: Use the outputs from previous reusable workflow
    needs: callWorkflow
    runs-on: ubuntu-latest
    steps:
      - run: >-
          echo ::debug::\${{ needs.callWorkflow.outputs.firstWord }} \${{
          needs.callWorkflow.outputs.firstWord }}

`;

snapshot[`reusable 2`] = `
# This file was autogenerated with actionify@0.3.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.3.0/cli.ts

name: A reusable workflow
'on':
  workflow_call:
    inputs:
      username:
        required: true
        type: string
      password:
        required: true
        type: string
      optional:
        type: number
    secrets:
      envPAT:
        required: true
      hush:
        description: Not required
    outputs:
      firstWord:
        description: The first output string
        value: \${{ jobs.exampleJob.outputs.output1 }}
      secondWord:
        description: The first output string
        value: \${{ jobs.exampleJob.outputs.output2 }}
jobs:
  exampleJob:
    name: Generate Output For Workflow
    runs-on: ubuntu-latest
    outputs:
      output1: \${{ steps.step1.outputs.firstWord }}
      output2: \${{ steps.step2.outputs.secondWord }}
    steps:
      - id: step1
        run: echo "::set-output name=firstWord::hello"
      - id: step2
        run: echo "::set-output name=secondWord::hello"

`;

snapshot[`napi 1`] = `
# This file was autogenerated with actionify@0.3.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.3.0/cli.ts

name: napi
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
env:
  DEBUG: napi:*
  APP_NAME: example
  MACOSX_DEPLOYMENT_TARGET: '10.13'
jobs:
  build:
    name: stable -\${{ matrix.settings.target }}- node@16
    if: \${{ !contains(github.event.head_commit.message'skip ci') }}
    runs-on: \${{ matrix.settings.host }}
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |-
              yarn build
              strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |-
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=\$(xcrun -f clang);
              export CXX=\$(xcrun -f clang++);
              SYSROOT=\$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot \$SYSROOT -isystem \$SYSROOT";
              yarn build --target aarch64-apple-darwin
              strip -x *.node
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: yarn build
          - host: windows-latest
            target: i686-pc-windows-msvc
            build: |-
              yarn build --target i686-pc-windows-msvc
              yarn test
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: yarn build --target aarch64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: set -e && yarn build --target x86_64-unknown-linux-gnu && strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: >-
              set -e && yarn build --target aarch64-unknown-linux-gnu &&
              aarch64-unknown-linux-gnu-strip *.node
          - host: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            setup: |-
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |-
              yarn build --target=armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip *.node
          - host: ubuntu-latest
            target: aarch64-linux-android
            build: >-
              export
              CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"

              export
              CC="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang"

              export
              CXX="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang++"

              export
              AR="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"

              export
              PATH="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:\${PATH}"

              yarn build --target aarch64-linux-android

              \${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - host: ubuntu-latest
            target: armv7-linux-androideabi
            build: >-
              export
              CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang"

              export
              CC="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang"

              export
              CXX="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang++"

              export
              AR="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"

              export
              PATH="\${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:\${PATH}"

              yarn build --target armv7-linux-androideabi

              \${ANDROID_NDK_LATEST_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |-
              set -e &&
              rustup target add aarch64-unknown-linux-musl &&
              yarn build --target aarch64-unknown-linux-musl &&
              /aarch64-linux-musl-cross/bin/aarch64-linux-musl-strip *.node
    steps:
      - name: Checkout
        uses: actions/checkout@3.0.2
      - if: \${{ !matrix.settings.docker }}
        name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: yarn
      - if: \${{ !matrix.settings.docker }}
        name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          toolchain: stable
          target: \${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |-
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: \${{ matrix.settings.target }}-cargo-\${{ matrix.settings.host }}
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: npm-cache-build-\${{ matrix.settings.target }}-node@16
      - if: matrix.settings.setup
        name: Setup toolchain
        run: matrix.settings.setup
        shell: bash
      - if: \${{ matrix.settings.target == 'i686-pc-windows-msvc' }}
        name: Setup node x86
        run: yarn config set supportedArchitectures.cpu "ia32"
        shell: bash
      - name: Install dependencies
        run: yarn install
      - if: \${{ matrix.settings.target == 'i686-pc-windows-msvc' }}
        name: Setup node x86
        uses: actions/setup-node@v3
        with:
          node-version: 16
          check-latest: true
          cache: yarn
          architecture: x86
      - if: matrix.settings.docker
        name: Build in docker
        uses: addnab/docker-run-action@v3
        with:
          image: \${{ matrix.settings.docker }}
          options: >-
            --user 0:0 -v \${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v \${{
            github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v \${{
            github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v \${{
            github.workspace }}:/build -w /build
          run: \${{ matrix.settings.build }}
      - if: \${{ !matrix.settings.docker }}
        name: Build
        run: \${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: bindings-\${{ matrix.settings.target }}
          path: \${{ env.APP_NAME }}.*.node
          if-no-files-found: error

`;

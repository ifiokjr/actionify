export const snapshot = {};

snapshot[`basic 1`] = `
import {
  commands,
  defineWorkflows,
  e,
  Runner,
  Workflow,
} from "https://deno.land/x/actionify@0.1.0/mod.ts";

const ciWorkflow = Workflow
  .create({ name: "ci", fileName: "ci" })
  .on("check_run", {
    types: ["completed", "created", "requested_action", "rerequested"],
  })
  .on("push")
  .on("pull_request", { branches: ["main"] })
  .permissions("read-all")
  .on("schedule", { cron: "" })
  .on("fork")
  .env({ "AWESOME": "true" })
  .defaults({ run: { shell: "bash" } })
  .permissions("write-all")
  .job("a", (job) => {
    return job
      .name("A")
      .outputs((ctx) => ({ action: e.expr(ctx.env.GITHUB_ACTION) }));
  })
  .job("b", (job) => {
    return job
      .name("B")
      .outputs((ctx) => ({ ci: e.expr(ctx.env.CI) }));
  })
  .job("c", (job) => {
    const result = job
      .needs("a")
      .name((ctx) => {
        return e.expr(ctx.needs.a.outputs.action);
      }).services({
        nginx: { image: "nginx", ports: ["8080:80"] },
        redis: { image: "redis", ports: ["6379/tcp"] },
      })
      .strategy({
        matrix: {
          os: [
            Runner.UbuntuLatest,
            Runner.MacOSLatest,
            Runner.WindowsLatest,
          ],
          node: [16, 17, 18],
          exclude: [{ os: Runner.UbuntuLatest, node: 16 }, { yo: true }],
          include: [{ a: 100 }],
        },
      })
      .name((ctx) => {
        return e.expr(ctx.job.services.nginx.id);
      })
      .name((ctx) => e.expr(ctx.matrix.os))
      .step((step) =>
        step
          .id("step1")
          .name("Step 1")
          .run(commands.setOutput("value", "custom"))
      );

    return result;
  })
  .env((ctx) => ({ YO: e.expr(ctx.github.workspace) }));

export default defineWorkflows({
  rootDirectory: import.meta.resolve("./"),
  workflows: [ciWorkflow],
});

`;

snapshot[`basic 2`] = `
# This file was autogenerated with actionify@0.1.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.1.0/cli.ts

name: ci
'on':
  check_run:
    types:
      - completed
      - created
      - requested_action
      - rerequested
  push: null
  pull_request:
    branches:
      - main
  schedule:
    cron: ''
  fork: null
permissions: write-all
env:
  YO: \${{ github.workspace }}
defaults:
  run:
    shell: bash
jobs:
  a:
    name: A
    outputs:
      action: \${{ env.GITHUB_ACTION }}
  b:
    name: B
    outputs:
      ci: \${{ env.CI }}
  c:
    name: \${{ matrix.os }}
    needs: a
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        node:
          - 16
          - 17
          - 18
        exclude:
          - os: ubuntu-latest
            node: 16
          - yo: true
        include:
          - a: 100
    services:
      nginx:
        image: nginx
        ports:
          - '8080:80'
      redis:
        image: redis
        ports:
          - 6379/tcp
    steps:
      - id: step1
        name: Step 1
        run: echo "::set-output name=value::custom"

`;

snapshot[`quickstart 1`] = `
import {
  defineWorkflows,
  e,
  step,
  workflow,
} from "https://deno.land/x/actionify@0.1.0/mod.ts";

const ciWorkflow = workflow({ name: "GitHub Actions Demo", fileName: "ci" })
  .on("push")
  .job("Explore-GitHub-Actions", (job) => {
    return job.steps(generateSteps());
  });

export default defineWorkflows({
  rootDirectory: import.meta.resolve("./"),
  workflows: [ciWorkflow],
});

function generateSteps() {
  return [
    step().run(
      \`echo "🎉 The job was automatically triggered by a \${
        e.wrap(e.ctx.github.event_name)
      } event.\`,
    ),
    step().run(
      \`echo "🐧 This job is now running on a \${
        e.wrap(e.ctx.runner.os)
      } server hosted by GitHub!"\`,
    ),
    step().run(
      \`echo "🔎 The name of your branch is \${
        e.wrap(e.ctx.github.ref)
      } and your repository is \${e.wrap(e.ctx.github.repository)}."\`,
    ),
    step().name("Check out the repository code").uses("actions/checkout@v3"),
    step().run(
      \`echo "💡 The \${
        e.wrap(e.ctx.github.repository)
      } repository has been cloned to the runner."\`,
    ),
    step().run(
      'echo "🖥️ The workflow is now ready to test your code on the runner."',
    ),
    step().name("List files in your repository").run([
      \`ls \${e.wrap(e.ctx.github.workspace)}\`,
    ]),
    step().run((ctx) => {
      return \`echo "🍏 This job's status is \${e.wrap(ctx.job.status)}."\`;
    }),
  ] as const;
}

`;

snapshot[`quickstart 2`] = `
# This file was autogenerated with actionify@0.1.0
# To update run: 
# deno run -Ar https://deno.land/x/actionify@0.1.0/cli.ts

name: GitHub Actions Demo
'on':
  push: null
jobs:
  Explore-GitHub-Actions:
    steps:
      - run: echo "🎉 The job was automatically triggered by a \${{ github.event_name }} event.
      - run: echo "🐧 This job is now running on a \${{ runner.os }} server hosted by GitHub!"
      - run: >-
          echo "🔎 The name of your branch is \${{ github.ref }} and your repository is \${{
          github.repository }}."
      - name: Check out the repository code
        uses: actions/checkout@v3
      - run: echo "💡 The \${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in your repository
        run: ls \${{ github.workspace }}
      - run: echo "🍏 This job's status is \${{ job.status }}."

`;

export const snapshot = {};

snapshot[`generate TypeScript module from cache.yml 1`] = `
import {
  type ActionTemplate,
  type DefaultStepInputs,
  e,
  step,
  type WithContext,
} from "https://deno.land/x/actionify@0.1.0/mod.ts";

export interface CacheInputs extends DefaultStepInputs {
  /** A list of files, directories, and wildcard patterns to cache and restore */
  "path": e.ExpressionValue;

  /** An explicit key for restoring and saving the cache */
  "key": e.ExpressionValue;

  /** An ordered list of keys to use for restoring stale cache if no cache hit occurred for key. Note \`cache-hit\` returns false in this case. */
  "restore-keys"?: e.ExpressionValue;

  /** The chunk size used to split up large files during upload, in bytes */
  "upload-chunk-size"?: e.ExpressionValue;
}

/** Cache artifacts like dependencies and build outputs to improve workflow execution time */
export default function cache<Base extends ActionTemplate = ActionTemplate>(inputs: WithContext<CacheInputs, Base, "jobs:jobId:steps:with">) {
  return step<Base & { stepOutputs: "cache-hit" }>()
    .uses("actions/cache@3.0.8")
    // @ts-expect-error Fix this later
    .with(inputs as DefaultStepInputs);
}

export const NAME = "Cache";
export const AUTHOR = "GitHub";

`;

snapshot[`generate TypeScript module from checkout.yml 1`] = `
import {
  type ActionTemplate,
  type DefaultStepInputs,
  e,
  step,
  type WithContext,
} from "https://deno.land/x/actionify@0.1.0/mod.ts";

export interface CheckoutInputs extends DefaultStepInputs {
  /**
   * Repository name with owner. For example, actions/checkout
   * @default "\${{ github.repository }}"
   */
  "repository"?: e.ExpressionValue;

  /**
   * The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.
   * 
   */
  "ref"?: e.ExpressionValue;

  /**
   * Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.
   * 
   * We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.
   * 
   * [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
   * 
   * @default "\${{ github.token }}"
   */
  "token"?: e.ExpressionValue;

  /**
   * SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.
   * 
   * We recommend using a service account with the least permissions necessary.
   * 
   * [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
   * 
   */
  "ssh-key"?: e.ExpressionValue;

  /**
   * Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility \`ssh-keyscan\`. For example, \`ssh-keyscan github.com\`. The public key for github.com is always implicitly added.
   * 
   */
  "ssh-known-hosts"?: e.ExpressionValue;

  /**
   * Whether to perform strict host key checking. When true, adds the options \`StrictHostKeyChecking=yes\` and \`CheckHostIP=no\` to the SSH command line. Use the input \`ssh-known-hosts\` to configure additional hosts.
   * 
   * @default true
   */
  "ssh-strict"?: e.ExpressionValue;

  /**
   * Whether to configure the token or SSH key with the local git config
   * @default true
   */
  "persist-credentials"?: e.ExpressionValue;

  /** Relative path under \$GITHUB_WORKSPACE to place the repository */
  "path"?: e.ExpressionValue;

  /**
   * Whether to execute \`git clean -ffdx && git reset --hard HEAD\` before fetching
   * @default true
   */
  "clean"?: e.ExpressionValue;

  /**
   * Number of commits to fetch. 0 indicates all history for all branches and tags.
   * @default 1
   */
  "fetch-depth"?: e.ExpressionValue;

  /** Whether to download Git-LFS files */
  "lfs"?: e.ExpressionValue;

  /**
   * Whether to checkout submodules: \`true\` to checkout submodules or \`recursive\` to recursively checkout submodules.
   * 
   * When the \`ssh-key\` input is not provided, SSH URLs beginning with \`git@github.com:\` are converted to HTTPS.
   * 
   */
  "submodules"?: e.ExpressionValue;

  /**
   * Add repository path as safe.directory for Git global config by running \`git config --global --add safe.directory <path>\`
   * @default true
   */
  "set-safe-directory"?: e.ExpressionValue;
}

/** Checkout a Git repository at a particular version */
export default function checkout<Base extends ActionTemplate = ActionTemplate>(inputs: WithContext<CheckoutInputs, Base, "jobs:jobId:steps:with"> = {}) {
  return step<Base>()
    .uses("actions/checkout@3.0.2")
    // @ts-expect-error Fix this later
    .with(inputs as DefaultStepInputs);
}

export const NAME = "Checkout";
export const AUTHOR = "";

`;
